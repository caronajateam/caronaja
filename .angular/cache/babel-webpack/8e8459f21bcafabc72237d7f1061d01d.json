{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { RoleValidator } from './../helpers/roleValidator';\nimport { switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService extends RoleValidator {\n    constructor(afAuth, afs, http) {\n      super();\n      this.afAuth = afAuth;\n      this.afs = afs;\n      this.http = http;\n      this.baseUrlApiGetLatLng = 'https://maps.googleapis.com/maps/api/geocode/json?address=';\n      this.user$ = this.afAuth.authState.pipe(switchMap(user => {\n        if (user) {\n          return this.afs.doc(`users/${user.uid}`).valueChanges();\n        }\n\n        return of(null);\n      }));\n    }\n\n    getLatLng(adress) {\n      let urlApi = this.baseUrlApiGetLatLng + adress + '&key=AIzaSyCuIEMW_tf4jNrtJaaSsS02l9TzFvM6YN4';\n      return this.http.get(urlApi);\n    }\n\n    sendVerificationEmail() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield (yield this.afAuth.currentUser).sendEmailVerification();\n      });\n    }\n\n    login(email, password) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const {\n            user\n          } = yield this.afAuth.signInWithEmailAndPassword(email, password);\n          return user;\n        } catch (error) {\n          console.log(error);\n        }\n      });\n    }\n\n    register(email, password, displayName, number, homeAdress, workAdress) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const {\n            user\n          } = yield this.afAuth.createUserWithEmailAndPassword(email, password);\n          this.sendVerificationEmail();\n          this.updateUserData(user, displayName, number, homeAdress, workAdress);\n          return user;\n        } catch (error) {\n          console.log(error);\n          return error.code;\n        }\n      });\n    }\n\n    logout() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield this.afAuth.signOut();\n        } catch (error) {\n          console.log(error);\n        }\n      });\n    }\n\n    resetPassword(email) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          return this.afAuth.sendPasswordResetEmail(email);\n        } catch (error) {\n          console.log(error);\n        }\n      });\n    }\n\n    updateUserData(user, displayName, number, homeAdress, workAdress) {\n      const userRef = this.afs.doc(`users/${user.uid}`);\n      const data = {\n        uid: user.uid,\n        email: user.email,\n        emailVerified: user.emailVerified,\n        displayName: displayName,\n        number: number,\n        photoURL: user.photoURL,\n        homeAdress: homeAdress,\n        workAdress: workAdress,\n        role: 'ADMIN',\n        iconMap: 'https://marketingspot.com.br/cimages/Logo02.png'\n      };\n      return userRef.set(data, {\n        merge: true\n      });\n    }\n\n    updateUserDataGoogle(user) {\n      const userRef = this.afs.doc(`users/${user.uid}`);\n      const data = {\n        uid: user.uid,\n        email: user.email,\n        emailVerified: user.emailVerified,\n        displayName: user.displayName,\n        photoURL: user.photoURL,\n        role: 'ADMIN'\n      };\n      return userRef.set(data, {\n        merge: true\n      });\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}