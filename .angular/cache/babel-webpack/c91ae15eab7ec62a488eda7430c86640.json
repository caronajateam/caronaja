{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let MainService = /*#__PURE__*/(() => {\n  class MainService {\n    constructor(afs) {\n      this.afs = afs;\n      this.roomsCollection = afs.collection('rooms');\n      this.roomsConvidadoCollection = afs.collection('rooms');\n      this.usersConvidadoCollection = afs.collection('users');\n      this.usersPropertyCollection = afs.collection('users');\n    }\n\n    salvarSala(room) {\n      const roomUid = this.afs.createId();\n      room.uidRoom = roomUid;\n      this.afs.doc(`rooms/${roomUid}`).set(room);\n      return roomUid;\n    }\n\n    salvarUsuarioNaSala(user, uidRoom) {\n      user.driver = false;\n      user.ride = 0;\n      user.distance = 0;\n      this.afs.doc(`rooms/${uidRoom}/members/${user.uid}`).set(user);\n    }\n\n    salvarSalaNoUsuario(uidUserRef, room) {\n      this.afs.doc(`users/${uidUserRef}/rooms/${room.uidRoom}`).set(room);\n    }\n\n    getRoom(uidUserRef) {\n      this.roomsCollection = this.afs.collection('rooms', ref => ref.where('uidUser', '==', uidUserRef));\n      return this.rooms = this.roomsCollection.snapshotChanges().pipe(map(actions => actions.map(a => a.payload.doc.data())));\n    }\n\n    getUsers(uidUserMember) {\n      this.usersPropertyCollection = this.afs.collection('users', ref => ref.where('uid', '==', uidUserMember));\n      return this.users = this.usersPropertyCollection.snapshotChanges().pipe(map(actions => actions.map(a => a.payload.doc.data())));\n    }\n\n    getOneRoom(uidRoom) {\n      this.room = this.afs.collection('rooms').doc(uidRoom).valueChanges();\n      return this.room;\n    }\n\n    getOneUser(uidUser) {\n      this.testeUser = this.afs.collection('users').doc(uidUser).valueChanges();\n      return this.testeUser;\n    }\n\n    getOneUserFromRoom(uidUser, uidRoom) {\n      return this.afs.collection('rooms').doc(uidRoom).collection('members').doc(uidUser).valueChanges();\n    }\n\n    getCar(uidUser, uidRoom) {\n      return this.afs.collection('users').doc(uidUser).collection('rooms').doc(uidRoom).collection('car').doc(uidUser).valueChanges();\n    }\n\n    membersOfRoom(uidRoom) {\n      this.users = this.afs.collection('rooms').doc(uidRoom).collection('members').valueChanges();\n      return this.users;\n    }\n\n    getRoomConvidado(uidUserRef) {\n      this.roomsConvidadoCollection = this.afs.collection('users').doc(uidUserRef).collection('rooms', ref => ref.where('uidUser', '!=', uidUserRef));\n      return this.roomsConvidado = this.roomsConvidadoCollection.snapshotChanges().pipe(map(actions => actions.map(a => a.payload.doc.data())));\n    }\n\n    deleteRoom(uidRoom, uidUserRef) {\n      this.afs.collection('rooms').doc(uidRoom).delete();\n      this.afs.collection('users').doc(uidUserRef).collection('rooms').doc(uidRoom).delete();\n    }\n\n    leaveRoom(uidRoom, uidUserRef) {\n      this.afs.collection('users').doc(uidUserRef).collection('rooms').doc(uidRoom).delete();\n      this.afs.collection('rooms').doc(uidRoom).collection('members').doc(uidUserRef).delete();\n    }\n\n    updateRoom(item, uidRoom) {\n      this.afs.collection('rooms').doc(uidRoom).collection('members').doc(item.uid).set(item, {\n        merge: true\n      });\n    }\n\n    updateUserInRoom(car, uidUser) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.afs.collection('rooms').doc(car.uidRoomCar).collection('members').doc(uidUser).update({\n          'distance': 1\n        });\n      });\n    }\n\n    updateUserInRoomZEROOO(uidRoom, uidUser) {\n      return this.afs.collection('rooms').doc(uidRoom).collection('members').doc(uidUser).update({\n        'distance': 0\n      });\n    }\n\n    getUserDriver(uidRoom) {\n      this.user = this.afs.collection('rooms').doc(uidRoom).collection('members', ref => ref.where('driver', '==', true)).valueChanges();\n      return this.user;\n    }\n\n    getUserPassenger(uidRoom) {\n      this.userCarMembers = this.afs.collection('rooms').doc(uidRoom).collection('members', ref => ref.where('driver', '==', false).where('distance', '==', 0)).valueChanges();\n      return this.userCarMembers;\n    }\n\n    getCars(uidRoom) {\n      let cars = this.userCarMembers = this.afs.collection('rooms').doc(uidRoom).collection('cars').valueChanges();\n      return cars;\n    }\n\n    getMembersOfCar(uidRoom, uidUserRef) {\n      this.membersOfCarToShow = this.afs.collection('users').doc(uidUserRef).collection('rooms').doc(uidRoom).collection('car').doc(uidUserRef).collection('carMembers').valueChanges();\n      return this.membersOfCarToShow;\n    }\n\n    getMembersOfCar2(uidRoom, uidUserRef) {\n      let members = this.afs.collection('users').doc(uidUserRef).collection('rooms').doc(uidRoom).collection('car').valueChanges();\n      return members;\n    }\n\n    saveUserMembersOfCar(userMembersOfCar, uidRoom, car) {\n      this.afs.collection('rooms').doc(uidRoom).collection('cars').doc(car.uidDriver).set(car);\n      this.afs.collection('users').doc(car.uidDriver).collection('rooms').doc(uidRoom).collection('car').doc(car.uidDriver).set(car);\n      userMembersOfCar.forEach(element => {\n        this.afs.collection('rooms').doc(uidRoom).collection('cars').doc(car.uidDriver).collection('carMembers').add(element);\n        this.afs.collection('users').doc(car.uidDriver).collection('rooms').doc(uidRoom).collection('car').doc(car.uidDriver).collection('carMembers').add(element);\n        userMembersOfCar.forEach(element2 => {\n          this.afs.collection('users').doc(element.uid).collection('rooms').doc(uidRoom).collection('car').doc(element.uid).set(car);\n          this.afs.collection('users').doc(element.uid).collection('rooms').doc(uidRoom).collection('car').doc(element.uid).collection('carMembers').add(element2);\n        });\n      });\n    }\n\n  }\n\n  MainService.ɵfac = function MainService_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  MainService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MainService,\n    factory: MainService.ɵfac,\n    providedIn: 'root'\n  });\n  return MainService;\n})();","map":null,"metadata":{},"sourceType":"module"}