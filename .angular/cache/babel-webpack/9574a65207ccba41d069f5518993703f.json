{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../main.service\";\nimport * as i2 from \"./../../shared/googlemaps/google-maps-API.service\";\nexport let CarService = /*#__PURE__*/(() => {\n  class CarService {\n    constructor(mainSvc, googleSvc) {\n      this.mainSvc = mainSvc;\n      this.googleSvc = googleSvc;\n    }\n\n    getUserDriver(room) {\n      return new Promise(resolve => {\n        this.mainSvc.getUserDriver(room.uidRoom).subscribe(resp => {\n          this.userDriver = resp;\n          console.log('carService - getUserDriver', this.userDriver);\n          return resolve(this.userDriver);\n        });\n      });\n    }\n\n    createCar(room) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let userDriver = yield this.getUserDriver(room);\n        let cars = [];\n\n        for (let index = 0; index < userDriver.length; index++) {\n          let distance = yield this.googleSvc.getPropretiesRoute(room.roomAdress, userDriver[index].homeAdress);\n          let car = {};\n          car = {\n            numberDriver: userDriver[index].number,\n            uidRoomCar: room.uidRoom,\n            displayNameDriver: userDriver[index].displayName,\n            origin: room.roomAdress,\n            destination: userDriver[index].homeAdress,\n            lugares: userDriver[index].ride,\n            count: 0,\n            distance: distance,\n            uidDriver: userDriver[index].uid\n          };\n          cars.push(car);\n        }\n\n        return cars;\n      });\n    } //**********************Membros do carro! */\n\n\n    getUserPassenger(room) {\n      return new Promise(resolve => {\n        this.mainSvc.getUserPassenger(room.uidRoom).subscribe(resp => {\n          let userPassenger = resp; // console.log(userPassenger)\n\n          return resolve(userPassenger);\n        });\n      });\n    }\n\n    getCars(room) {\n      return new Promise(resolve => {\n        this.mainSvc.getCars(room.uidRoom).subscribe(resp => {\n          let cars = resp; // console.log(userPassenger)\n\n          return resolve(cars);\n        });\n      });\n    }\n\n    matchNow(room) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let cars = [];\n        ;\n        cars = yield this.createCar(room);\n        cars.forEach(element => {\n          console.log(cars);\n        }); // await this.checkCarMembers(cars,room )\n\n        for (let index = 0; index < cars.length; index++) {\n          let membersOfCar = yield this.getMembersOfCar(cars[index], room);\n          this.saveUserMembersOfCarFirestore(membersOfCar, room.uidRoom, cars[index]);\n        }\n      });\n    } // async checkCarMembers(cars: Car[], room){\n    //   let membersOfAllCar: { car: {membersOfCar: User[]}[] };\n    //   // for (let i = 0; i < cars.length; i++) {\n    //     for (let j = 0; j < cars.length; j++) {\n    //       let membersOfCar = await this.getMembersOfCar(cars[j], room);\n    //       console.log('membersOfCar');\n    //       console.log(membersOfCar);\n    //       membersOfAllCar.car;\n    //     }\n    // }\n\n\n    getMembersOfCar(car, room) {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log('carService - getMembersOfCar'); //2000 é a distancia que motorista permite aumentar na rota dele\n\n        let distanceCar = car.distance + 2000;\n        console.log('carService - getMembersOfCar', distanceCar);\n        let lugares = car.lugares;\n        let lugaresAux = 0;\n        let userPassenger = yield this.getUserPassenger(room);\n        let userPossibleMembers = [];\n        let userMembersOfCar = [];\n        let count = 0;\n        let closestUserPossible;\n        let indexOfclosestUserPossible;\n        let closestDistanceUserPossible = 99999999999999;\n        let closestDistanceOriginUserPossible;\n        console.log('lista completa de passageiros');\n\n        if (userPassenger != []) {\n          userPassenger.forEach(element => {\n            console.log(element);\n          });\n        }\n\n        count = 0;\n\n        for (let index = 0; index < userPassenger.length; index++) {\n          userPassenger[index].distanceOrigin = yield this.googleSvc.getPropretiesRoute(car.origin, userPassenger[index].homeAdress);\n          userPassenger[index].distanceDestination = yield this.googleSvc.getPropretiesRoute(userPassenger[index].homeAdress, car.destination);\n\n          if (userPassenger[index].distanceDestination + userPassenger[index].distanceOrigin <= distanceCar) {\n            userPossibleMembers[count] = userPassenger[index];\n            count++;\n          }\n        }\n\n        console.log('lista de possives passageiros');\n        userPossibleMembers.forEach(element => {\n          console.log(element);\n        }); //Passageiro com a rota mais perto!!\n\n        for (let index = 0; index < userPossibleMembers.length; index++) {\n          if (userPossibleMembers[index].distanceOrigin + userPossibleMembers[index].distanceDestination <= closestDistanceUserPossible) {\n            closestDistanceUserPossible = userPossibleMembers[index].distanceOrigin + userPossibleMembers[index].distanceDestination;\n            closestUserPossible = userPossibleMembers[index];\n            closestDistanceOriginUserPossible = userPossibleMembers[index].distanceOrigin;\n            indexOfclosestUserPossible = index;\n          }\n        }\n\n        console.log('passageiro mais perto!', closestUserPossible);\n\n        if (indexOfclosestUserPossible > -1) {\n          userPossibleMembers.splice(indexOfclosestUserPossible, 1);\n          userMembersOfCar.push(closestUserPossible);\n          yield this.saveIfMemberHasRide(car, closestUserPossible.uid);\n        }\n\n        console.log('lista de possiveis passageiros');\n        userPossibleMembers.forEach(element => {\n          console.log(element);\n        });\n        console.log('lista de passageiros');\n        userMembersOfCar.forEach(element => {\n          console.log(element);\n        });\n        let otherClosestUserPossible;\n        let otherClosestDistanceUserPossible = 99999999999999;\n        let indexOfOtherClosestUserPossible;\n        let origin;\n        let mid;\n        let destination;\n\n        for (let j = lugaresAux; j < lugares;) {\n          if (userPossibleMembers.length == 0) {\n            break;\n          }\n\n          if (userMembersOfCar.length == lugares) {\n            break;\n          }\n\n          for (let i = 0; i < userPossibleMembers.length; i++) {\n            if (userPossibleMembers.length == 0) {\n              break;\n            }\n\n            if (userMembersOfCar.length == lugares) {\n              break;\n            }\n\n            if (userPossibleMembers.length != 0) {\n              otherClosestDistanceUserPossible = 99999999999999;\n              otherClosestUserPossible = null;\n\n              for (let ot = 0; ot < userPossibleMembers.length; ot++) {\n                if (userPossibleMembers[ot].distanceOrigin + userPossibleMembers[ot].distanceDestination <= otherClosestDistanceUserPossible) {\n                  otherClosestDistanceUserPossible = userPossibleMembers[ot].distanceOrigin + userPossibleMembers[ot].distanceDestination;\n                  otherClosestUserPossible = userPossibleMembers[ot];\n                  indexOfOtherClosestUserPossible = ot;\n                }\n              }\n\n              if (userPossibleMembers.length != 0) {\n                if (indexOfOtherClosestUserPossible > -1) {\n                  userPossibleMembers.splice(indexOfOtherClosestUserPossible, 1);\n                }\n\n                console.log('otherClosestUserPossible');\n                console.log(otherClosestUserPossible); //COMPARAÇÃO DE DISTANCIAS\n\n                origin = 99999999999;\n                destination = 99999999999;\n                let destinationMember = 99999999999;\n                let destinationOther = yield this.googleSvc.getPropretiesRoute(otherClosestUserPossible.homeAdress, car.destination);\n\n                for (let o = 0; o < userMembersOfCar.length; o++) {\n                  let destinationAux = yield this.googleSvc.getPropretiesRoute(userMembersOfCar[o].homeAdress, car.destination);\n\n                  if (destinationAux <= destinationMember) {\n                    destinationMember = destinationAux;\n                  }\n                }\n\n                console.log('TOPOOOOOOOOOOO');\n                console.log('destinationMember', destinationMember);\n                console.log('destinationOther', destinationOther);\n\n                if (destinationOther <= destinationMember) {\n                  destination = destinationOther;\n                  let midOther;\n                  let originMember;\n                  midOther = 99999999999;\n\n                  for (let index = 0; index < userMembersOfCar.length; index++) {\n                    let midAux = yield this.googleSvc.getPropretiesRoute(userMembersOfCar[index].homeAdress, otherClosestUserPossible.homeAdress);\n\n                    if (midAux <= midOther) {\n                      midOther = midAux;\n                    }\n                  }\n\n                  mid = 0;\n                  mid = (yield this.distanceBetweenMembers(userMembersOfCar)) + midOther;\n                  originMember = 99999999999;\n\n                  for (let index = 0; index < userMembersOfCar.length; index++) {\n                    let originAux = yield this.googleSvc.getPropretiesRoute(car.origin, userMembersOfCar[index].homeAdress);\n\n                    if (originAux <= originMember) {\n                      originMember = originAux;\n                    }\n                  }\n\n                  origin = 0;\n                  origin = originMember;\n                  console.log('onde originOther <= originMember origin:', origin);\n                  console.log('onde originOther <= originMember mid:', mid);\n                  console.log('onde originOther <= originMember destination:', destination);\n                } else {\n                  destination = destinationMember;\n                  let originMember = 99999999999;\n                  let originOther = yield this.googleSvc.getPropretiesRoute(car.origin, otherClosestUserPossible.homeAdress);\n\n                  for (let index = 0; index < userMembersOfCar.length; index++) {\n                    let originAux = yield this.googleSvc.getPropretiesRoute(car.origin, userMembersOfCar[index].homeAdress);\n\n                    if (originAux <= originMember) {\n                      originMember = originAux;\n                    }\n                  }\n\n                  let midOther = 99999999999;\n\n                  if (originOther <= originMember) {\n                    midOther = 99999999999;\n\n                    for (let index = 0; index < userMembersOfCar.length; index++) {\n                      let midAux = yield this.googleSvc.getPropretiesRoute(otherClosestUserPossible.homeAdress, userMembersOfCar[index].homeAdress);\n\n                      if (midAux <= midOther) {\n                        midOther = midAux;\n                      }\n                    }\n\n                    mid = 0;\n                    mid = (yield this.distanceBetweenMembers(userMembersOfCar)) + midOther;\n                    origin = 0;\n                    origin = originOther;\n                    console.log('onde else - destinationOther <= destinationMember origin: ', origin);\n                    console.log('onde else - destinationOther <= destinationMember midOther: ', midOther);\n                    console.log('onde else - destinationOther <= destinationMember midFUNCT: ', mid - midOther);\n                    console.log('onde else - destinationOther <= destinationMember mid: ', mid);\n                    console.log('onde else - destinationOther <= destinationMember dest:', destination);\n                  } else {\n                    mid = 0;\n                    mid = yield this.distanceBetweenMembers(userMembersOfCar, otherClosestUserPossible);\n                    destination = 0;\n                    destination = destinationMember;\n                    origin = 0;\n                    origin = originMember;\n                    console.log('onde else - else origin:', origin);\n                    console.log('onde else - else mid:', mid);\n                    console.log('onde else -else destination:', destination);\n                  }\n                }\n\n                if (origin + mid + destination <= distanceCar) {\n                  userMembersOfCar.push(otherClosestUserPossible);\n                  yield this.saveIfMemberHasRide(car, otherClosestUserPossible.uid);\n                  lugaresAux++;\n                }\n\n                console.log('lista de possiveis passageiros, depois de destination');\n                userPossibleMembers.forEach(element => {\n                  console.log(element);\n                });\n                console.log('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');\n                console.log(userPossibleMembers);\n                console.log('lista de passageiros do carro, depois de destination');\n                userMembersOfCar.forEach(element => {\n                  console.log(element);\n                });\n              } else {\n                lugaresAux = lugares;\n              }\n            } else {\n              lugaresAux = lugares;\n            }\n          }\n        }\n\n        console.log('membros do carro final', car.displayNameDriver);\n        userMembersOfCar.forEach(element => {\n          console.log(element);\n        });\n        return userMembersOfCar;\n      });\n    }\n\n    saveUserMembersOfCarFirestore(userMembersOfCar, uidRoom, car) {\n      this.mainSvc.saveUserMembersOfCar(userMembersOfCar, uidRoom, car);\n    }\n\n    saveIfMemberHasRide(car, uidUser) {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.mainSvc.updateUserInRoom(car, uidUser);\n      });\n    }\n\n    saveIfMemberHasRideZEROOO(uidRoom, uidUser) {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.mainSvc.updateUserInRoomZEROOO(uidRoom, uidUser);\n      });\n    }\n\n    distanceBetweenMembers(userMembersOfCar, otherClosestUserPossible) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let mid;\n        let userMembersOfCarAux = [];\n        userMembersOfCarAux = [];\n\n        for (let index = 0; index < userMembersOfCar.length; index++) {\n          userMembersOfCarAux.push(userMembersOfCar[index]);\n        }\n\n        if (otherClosestUserPossible) {\n          userMembersOfCarAux.push(otherClosestUserPossible);\n        }\n\n        let menorMid1;\n        let menorMid2;\n        let midAux;\n        let mid1Inxex;\n        let mid2Inxex;\n        midAux = 0;\n        console.log('NOVO AAAAAAAAAAAAAAAARRAEEEEEEEYYYYy', userMembersOfCarAux);\n\n        for (let h = 0; h < userMembersOfCarAux.length; h++) {\n          if (userMembersOfCarAux.length == 0) {\n            break;\n          }\n\n          menorMid1 = 99999999999;\n          menorMid2 = 99999999999;\n\n          for (let index = 0; index < userMembersOfCarAux.length; index++) {\n            if (userMembersOfCarAux.length <= 2) {\n              break;\n            }\n\n            if (index != h) {\n              let mid1 = yield this.googleSvc.getPropretiesRoute(userMembersOfCarAux[index].homeAdress, userMembersOfCarAux[h].homeAdress);\n\n              if (mid1 <= menorMid1) {\n                menorMid1 = mid1;\n                mid1Inxex = index;\n              }\n\n              let mid2 = yield this.googleSvc.getPropretiesRoute(userMembersOfCarAux[h].homeAdress, userMembersOfCarAux[index].homeAdress);\n\n              if (mid2 <= menorMid2) {\n                menorMid2 = mid2;\n                mid2Inxex = index;\n              }\n\n              if (menorMid1 <= menorMid2) {\n                midAux = midAux + menorMid1;\n                userMembersOfCarAux.splice(mid1Inxex, 1);\n              } else {\n                midAux = midAux + menorMid2;\n                userMembersOfCarAux.splice(mid2Inxex, 1);\n              }\n            }\n          }\n        }\n\n        mid = 0;\n        mid = midAux;\n        return mid;\n      });\n    }\n\n  }\n\n  CarService.ɵfac = function CarService_Factory(t) {\n    return new (t || CarService)(i0.ɵɵinject(i1.MainService), i0.ɵɵinject(i2.GoogleMapsAPIService));\n  };\n\n  CarService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CarService,\n    factory: CarService.ɵfac,\n    providedIn: 'root'\n  });\n  return CarService;\n})();","map":null,"metadata":{},"sourceType":"module"}